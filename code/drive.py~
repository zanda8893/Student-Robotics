import robot_obj
import time
import threading

drive_lock = threading.Lock()

#signalled when the current drive function is to be overridden
drive_cond = threading.Condition(drive_lock)

#set drive - do not use from outside this file
def setDrive(l,r):
    robot_obj.R.motors[0].m0.power = l
    robot_obj.R.motors[0].m1.power = r

#drive in a striaght line for t seconds
#negative t means it sets the power indefinitely
def driveStraightSync(power,t=-1):
    global drive_lock
    drive_lock.acquire()
    drive_cond.notify_all()
    setDrive(power,power)
    if t < 0:
        drive_lock.release()
        return
    res = drive_cond.wait(timeout=t)
    if not res:
        setDrive(0,0)
    drive_lock.release()
    return
    
